import logging
import sys
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode, InputTextMessageContent, InlineQueryResultArticle, InputFile
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

from load_map import load_map
from load_data import load_protagonist, load_npcs, load_enemies

API_TOKEN = 'your_token'

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# Load game data
locations, start_location = load_map()
protagonist = load_protagonist(start_location)
npcs = load_npcs()
enemies = load_enemies()

# Keyboard buttons
main_menu_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu_kb.add(KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"))
main_menu_kb.add(KeyboardButton("–†–∞–∑–≥–æ–≤–æ—Ä —Å NPC"), KeyboardButton("–ê—Ç–∞–∫–∞ –≤—Ä–∞–≥–∞"))
main_menu_kb.add(KeyboardButton("–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è"), KeyboardButton("–í—ã–π—Ç–∏"))

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
last_user_id = None

photo_dict = {
        'Neon Gate': 'img/neon_gate_1.jpg',
        'Cyber Street': 'img/cyber_street_2.jpg',
        'Tech Market': 'img/tech_market_3.jpg',
        'Hackers Den': 'img/hackers_den.jpg',
        'Corporate Tower': 'img/corporate_tower.jpg',
        'Back Alley': 'img/back_alley.jpg',
        'Underground Club': 'img/underground_club.jpg',
        'Sky Lounge': 'img/sky_lounge.jpg',
        'Roof Top Garden': 'img/roof_top_garden.jpg'
    }


async def send_message_to_user(text):
    if last_user_id:
        await bot.send_message(last_user_id, text)


# –ö–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è stdout –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç
class TelegramLogger:
    def __init__(self):
        self.original_stdout = sys.stdout

    def write(self, message):
        if message.strip():
            loop = asyncio.get_event_loop()
            if loop.is_running():
                asyncio.create_task(send_message_to_user(message))
            else:
                loop.run_until_complete(send_message_to_user(message))

    def flush(self):
        pass


# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ stdout –Ω–∞ TelegramLogger
sys.stdout = TelegramLogger()


# Start command handler
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    global last_user_id
    last_user_id = message.from_user.id
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!", reply_markup=main_menu_kb)


# Profile command handler
@dp.message_handler(lambda message: message.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    global last_user_id
    last_user_id = message.from_user.id
    profile_text = (
        f"–ò–º—è –∏–≥—Ä–æ–∫–∞: {protagonist.name}\n"
        f"–ó–¥–æ—Ä–æ–≤—å–µ: {protagonist.hp}\n"
        f"–°–∏–ª–∞üí™üèª: {protagonist.strength}\n"
        f"–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ: {protagonist.craft}\n"
        f"–£—Ä–æ–≤–µ–Ω—å: {protagonist.level}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã: {', '.join(protagonist.active_quests)}\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã: {', '.join(protagonist.completed_quests)}\n"
        f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {', '.join(protagonist.inventory.keys())}\n"
        f"–¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è: {protagonist.current_location.name}"
    )
    await message.reply(profile_text)


# Location command handler
@dp.message_handler(lambda message: message.text == "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
async def show_location(message: types.Message):
    global last_user_id
    last_user_id = message.from_user.id
    await bot.send_photo(chat_id=message.chat.id, photo=InputFile(f"{photo_dict.get(protagonist.current_location.name)}"))
    location_text = (
        f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å: {protagonist.current_location.name}\n"
        f"{protagonist.current_location.description}"
    )
    await message.reply(location_text)


# Talk to NPC command handler
@dp.message_handler(lambda message: message.text == "–†–∞–∑–≥–æ–≤–æ—Ä —Å NPC")
async def talk_to_npc_handler(message: types.Message):
    global last_user_id
    last_user_id = message.from_user.id
    npc_kb = InlineKeyboardMarkup()
    for i, npc in enumerate(npcs):
        npc_kb.add(InlineKeyboardButton(npc.name, callback_data=f"npc_{i}"))
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ NPC –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:", reply_markup=npc_kb)


@dp.callback_query_handler(lambda c: c.data.startswith('npc_'))
async def process_npc_callback(callback_query: types.CallbackQuery):
    index = int(callback_query.data.split('_')[1])
    npc = npcs[index]
    dialogue_text = f"–í—ã –ø–æ–¥–æ—à–ª–∏ –∫ {npc.name}.\n{npc.dialogue.greeting}"
    dialogue_kb = InlineKeyboardMarkup()
    for i, question in enumerate(npc.dialogue.questions):
        dialogue_kb.add(InlineKeyboardButton(npc.dialogue.questions[question], callback_data=f"dialogue_{index}_{i}"))
    await bot.send_message(callback_query.from_user.id, dialogue_text, reply_markup=dialogue_kb)


@dp.callback_query_handler(lambda c: c.data.startswith('dialogue_'))
async def process_dialogue_callback(callback_query: types.CallbackQuery):
    dialogue_kb = InlineKeyboardMarkup()
    data = callback_query.data.split('_')
    index = int(data[1])
    question_index = int(data[2])
    npc = npcs[index]
    question = list(npc.dialogue.questions.keys())[question_index]
    answer = npc.dialogue.get_answer(question)
    await bot.send_message(callback_query.from_user.id, answer)

    # Implementing quest acceptance/rejection
    if question == 'quest':
        quest = npc.offer_quest()
        if quest.objective['item'] not in protagonist.inventory:
            quest_kb = InlineKeyboardMarkup()
            quest_kb.add(InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å –∫–≤–µ—Å—Ç", callback_data=f"accept_quest_{index}"))
            quest_kb.add(InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∫–≤–µ—Å—Ç", callback_data=f"decline_quest_{index}"))
            await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=quest_kb)
        elif quest.objective['item'] in protagonist.inventory:
            quest_kb = InlineKeyboardMarkup()
            quest_kb.add(InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–µ—Å—Ç", callback_data=f"finish_quest_{index}"))
            quest_kb.add(InlineKeyboardButton("–ù–µ –∑–∞–≤–µ—Ä—à–∞—Ç—å –∫–≤–µ—Å—Ç", callback_data=f"exit_quest_{index}"))
            await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=quest_kb)

    # Implementing item acceptance/rejection
    elif question == 'addition' and npc.inventory:
        inventory_kb = InlineKeyboardMarkup()
        inventory_kb.add(InlineKeyboardButton("–í–∑—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data=f"take_item_{index}"))
        inventory_kb.add(InlineKeyboardButton("–ù–ï –±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data=f"decline_item_{index}"))
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inventory_kb)


@dp.callback_query_handler(lambda c: c.data.startswith('accept_quest_') or c.data.startswith('decline_quest_')
                                     or c.data.startswith('exit_quest_') or c.data.startswith('finish_quest_'))
async def process_quest_choice(callback_query: types.CallbackQuery):
    data = callback_query.data.split('_')
    index = int(data[2])
    npc = npcs[index]
    if data[0] == 'accept':
        protagonist.quest_to(npc)
        await bot.send_message(callback_query.from_user.id, f"–ö–≤–µ—Å—Ç –æ—Ç {npc.name} –ø—Ä–∏–Ω—è—Ç!")
    elif data[0] == 'decline':
        await bot.send_message(callback_query.from_user.id, f"–ö–≤–µ—Å—Ç –æ—Ç {npc.name} –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
    elif data[0] == 'exit':
        await bot.send_message(callback_query.from_user.id, f"–ö–≤–µ—Å—Ç –æ—Ç–ª–æ–∂–µ–Ω")
    elif data[0] == 'finish':
        protagonist.quest_to(npc)
        await bot.send_message(callback_query.from_user.id, f"–ö–≤–µ—Å—Ç –æ—Ç {npc.name} –∑–∞–≤–µ—Ä—à–µ–Ω!")


@dp.callback_query_handler(lambda c: c.data.startswith('take_item_') or c.data.startswith('decline_item_'))
async def process_item_choice(callback_query: types.CallbackQuery):
    data = callback_query.data.split('_')
    index = int(data[2])
    npc = npcs[index]
    if data[0] == 'take':
        item = npc.inventory["item"]
        if item not in protagonist.inventory:
            protagonist.take(item)
            await bot.send_message(callback_query.from_user.id, f"–ü—Ä–µ–¥–º–µ—Ç {item} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
        else:
            await bot.send_message(callback_query.from_user.id, f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å {item} –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ")
    else:
        await bot.send_message(callback_query.from_user.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –≤–∑—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç.")


# Attack enemy command handler
@dp.message_handler(lambda message: message.text == "–ê—Ç–∞–∫–∞ –≤—Ä–∞–≥–∞")
async def attack_enemy_handler(message: types.Message):
    global last_user_id
    last_user_id = message.from_user.id
    enemy_kb = InlineKeyboardMarkup()
    for i, enemy in enumerate(enemies):
        enemy_kb.add(InlineKeyboardButton(enemy.name, callback_data=f"enemy_{i}"))
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞–≥–∞ –¥–ª—è –∞—Ç–∞–∫–∏:", reply_markup=enemy_kb)


@dp.callback_query_handler(lambda c: c.data.startswith('enemy_'))
async def process_enemy_callback(callback_query: types.CallbackQuery):
    index = int(callback_query.data.split('_')[1])
    enemy = enemies[index]
    protagonist.attack(enemy)
    if protagonist.hp <= 0:
        protagonist.if_exit(start_location)
    else:
        await bot.send_message(callback_query.from_user.id, f"–ó–¥–æ—Ä–æ–≤—å–µ: {protagonist.hp}")


# Move command handler
@dp.message_handler(lambda message: message.text == "–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è")
async def move_handler(message: types.Message):
    global last_user_id
    last_user_id = message.from_user.id
    directions_kb = InlineKeyboardMarkup()
    for direction in protagonist.possible_directions():
        directions_kb.add(InlineKeyboardButton(direction, callback_data=f"move_{direction}"))
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=directions_kb)


@dp.callback_query_handler(lambda c: c.data.startswith('move_'))
async def process_move_callback(callback_query: types.CallbackQuery):
    direction = callback_query.data.split('_')[1]
    success = protagonist.go(direction)
    await bot.send_photo(chat_id=callback_query.message.chat.id,
                         photo=InputFile(f"{photo_dict.get(protagonist.current_location.name)}"))


# Exit command handler
@dp.message_handler(lambda message: message.text == "–í—ã–π—Ç–∏")
async def exit_game(message: types.Message):
    global last_user_id
    last_user_id = message.from_user.id
    protagonist.if_exit(start_location)
    await message.reply("–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã. –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!")
    print("–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã")


if __name__ == '__main__':
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True)
